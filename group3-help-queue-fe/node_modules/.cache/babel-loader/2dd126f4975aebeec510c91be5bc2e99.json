{"ast":null,"code":"var _jsxFileName = \"/home/dylan/Documents/Group3FinalGroupProjectCNE/group3-help-queue-fe/src/queuedTickets.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport CardModal from './cardModal';\nimport { CreateTicketModal } from './createTicketModal';\nimport ReactPaginate from 'react-paginate';\nimport axios from 'axios';\nimport CardStructure from './cardStructure';\nimport './Headings.css';\nimport './Tickets.css';\nimport './Buttons.css';\nimport './Pagnation.css';\nimport './Inputs.css';\nimport { UpdateTicketModal } from './updateTicketModal';\nimport { SolutionModal } from './solutionModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst QueuedTickets = ({\n  tickets,\n  setTickets,\n  refresh,\n  setRefresh\n}) => {\n  _s();\n\n  const [showCreateTicketModal, setShowCreateTicketModal] = useState(false);\n  const [showUpdateTicketModal, setShowUpdateTicketModal] = useState(false);\n  const [showTicketModal, setShowTicketModal] = useState(false);\n  const [showSolutionModal, setShowSolutionModal] = useState(false);\n  const [currentTicketModal, setCurrentTicketModal] = useState([]);\n  const [ticketDescription, setTicketDescription] = useState('');\n  const [ticketTitle, setTicketTitle] = useState('');\n  const [pageNum, setPageNum] = useState(1);\n  const numOfTickets = tickets.length;\n  const ticketsPerPage = 4;\n  const firstTicketToDisplay = (pageNum - 1) * ticketsPerPage + 1; // eg. user clicks page 2 button, we want tickets 5-8 to display.\n\n  const displayTickets = tickets.slice(firstTicketToDisplay - 1, firstTicketToDisplay + (ticketsPerPage - 1));\n  const numOfPages = Math.ceil(numOfTickets / ticketsPerPage);\n\n  const openTicketModal = ticketDetails => {\n    setShowTicketModal(prev => !prev);\n    setCurrentTicketModal(ticketDetails);\n  };\n\n  const openCreateTicketModal = () => {\n    setShowCreateTicketModal(prev => !prev);\n  };\n\n  const openUpdateTicketModal = ticketDetails => {\n    setShowUpdateTicketModal(prev => !prev);\n    setCurrentTicketModal(ticketDetails);\n    setTicketDescription(ticketDetails.description);\n    setTicketTitle(ticketDetails.title);\n  };\n\n  const openSolutionModal = ticketDetails => {\n    setShowSolutionModal(prev => !prev);\n    setCurrentTicketModal(ticketDetails);\n  };\n\n  const updateTicketContents = ({\n    ticketDescription,\n    ticketTitle,\n    currentTicketModal\n  }) => {\n    axios.put(`http://localhost:8899/tickets/update/${currentTicketModal.id}`, {\n      complete: currentTicketModal.complete,\n      name: currentTicketModal.name,\n      description: ticketDescription,\n      title: ticketTitle,\n      urgency: currentTicketModal.urgency\n    }).then(function (response) {\n      console.log(response);\n    }).catch(function (error) {\n      console.log(error);\n    });\n    setRefresh(true);\n  };\n\n  const updateTicketWithSolution = ({\n    solution,\n    currentTicketModal\n  }) => {\n    axios.put(`http://localhost:8899/tickets/update/${currentTicketModal.id}`, {\n      complete: true,\n      name: currentTicketModal.name,\n      description: currentTicketModal.description,\n      title: currentTicketModal.title,\n      solution: solution,\n      urgency: currentTicketModal.urgency\n    }).then(function (response) {\n      console.log(response);\n    }).catch(function (error) {\n      console.log(error);\n    });\n    setRefresh(true);\n  };\n\n  const createNewTicket = ({\n    name,\n    ticketDescription,\n    ticketTitle,\n    urgency\n  }) => {\n    axios.post(`http://localhost:8899/tickets/create`, {\n      complete: false,\n      name: name,\n      description: ticketDescription,\n      title: ticketTitle,\n      urgency: urgency\n    }).then(function (response) {\n      console.log(response);\n    }).catch(function (error) {\n      console.log(error);\n    });\n    setRefresh(true);\n  };\n\n  const deleteTicket = id => {\n    axios.delete(`http://localhost:8899/tickets/delete/${id}`).then(function (response) {\n      console.log(response);\n    }).catch(function (error) {\n      console.log(error);\n    });\n    setRefresh(true);\n  };\n\n  const changePage = ({\n    selected\n  }) => {\n    setPageNum(selected + 1);\n    console.log('updated list with new ticket: ', tickets);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"queuedHeading\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"header\",\n        id: \"create-ticket\",\n        children: \"Queued Tickets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btnCreate\",\n        id: \"create-ticket\",\n        onClick: openCreateTicketModal,\n        children: \"Create Ticket\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cardGrid\",\n      children: [displayTickets.map(cardStuff => /*#__PURE__*/_jsxDEV(CardStructure, {\n        cardStuff: cardStuff,\n        openTicketModal: openTicketModal,\n        deleteTicket: deleteTicket,\n        openUpdateTicketModal: openUpdateTicketModal,\n        openSolutionModal: openSolutionModal\n      }, cardStuff.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 25\n      }, this)), /*#__PURE__*/_jsxDEV(CardModal, {\n        showTicketModal: showTicketModal,\n        setShowTicketModal: setShowTicketModal,\n        currentTicketModal: currentTicketModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CreateTicketModal, {\n        showCreateTicketModal: showCreateTicketModal,\n        setShowCreateTicketModal: setShowCreateTicketModal,\n        createNewTicket: createNewTicket\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(UpdateTicketModal, {\n        showUpdateTicketModal: showUpdateTicketModal,\n        setShowUpdateTicketModal: setShowUpdateTicketModal,\n        updateTicketContents: updateTicketContents,\n        currentTicketModal: currentTicketModal,\n        setCurrentTicketModal: setCurrentTicketModal,\n        ticketDescription: ticketDescription,\n        setTicketDescription: setTicketDescription,\n        ticketTitle: ticketTitle,\n        setTicketTitle: setTicketTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SolutionModal, {\n        showSolutionModal: showSolutionModal,\n        setShowSolutionModal: setShowSolutionModal,\n        currentTicketModal: currentTicketModal,\n        updateTicketWithSolution: updateTicketWithSolution\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pageArea\",\n      children: /*#__PURE__*/_jsxDEV(ReactPaginate, {\n        previousLabel: \"Previous\",\n        nextLabel: \"Next\",\n        pageCount: numOfPages,\n        onPageChange: changePage,\n        containerClassName: \"pageButtons\",\n        previousLinkClassName: \"previousButton\",\n        nextLinkClassName: \"nextButton\",\n        activeClassName: \"activePage\",\n        disabledClassName: \"disabled\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(QueuedTickets, \"PTQX297WYDJ2oZUp4Dp4mI+74lU=\");\n\n_c = QueuedTickets;\nexport default QueuedTickets;\n\nvar _c;\n\n$RefreshReg$(_c, \"QueuedTickets\");","map":{"version":3,"sources":["/home/dylan/Documents/Group3FinalGroupProjectCNE/group3-help-queue-fe/src/queuedTickets.jsx"],"names":["React","useState","CardModal","CreateTicketModal","ReactPaginate","axios","CardStructure","UpdateTicketModal","SolutionModal","QueuedTickets","tickets","setTickets","refresh","setRefresh","showCreateTicketModal","setShowCreateTicketModal","showUpdateTicketModal","setShowUpdateTicketModal","showTicketModal","setShowTicketModal","showSolutionModal","setShowSolutionModal","currentTicketModal","setCurrentTicketModal","ticketDescription","setTicketDescription","ticketTitle","setTicketTitle","pageNum","setPageNum","numOfTickets","length","ticketsPerPage","firstTicketToDisplay","displayTickets","slice","numOfPages","Math","ceil","openTicketModal","ticketDetails","prev","openCreateTicketModal","openUpdateTicketModal","description","title","openSolutionModal","updateTicketContents","put","id","complete","name","urgency","then","response","console","log","catch","error","updateTicketWithSolution","solution","createNewTicket","post","deleteTicket","delete","changePage","selected","map","cardStuff"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport CardModal from './cardModal';\nimport { CreateTicketModal } from './createTicketModal';\nimport ReactPaginate from 'react-paginate';\nimport axios from 'axios';\n\nimport CardStructure from './cardStructure';\nimport './Headings.css';\nimport './Tickets.css';\nimport './Buttons.css';\nimport './Pagnation.css';\nimport './Inputs.css';\nimport { UpdateTicketModal } from './updateTicketModal';\nimport { SolutionModal } from './solutionModal';\n\n\nconst QueuedTickets = ({ tickets, setTickets, refresh, setRefresh }) => {\n\n    const [showCreateTicketModal, setShowCreateTicketModal] = useState(false);\n    const [showUpdateTicketModal, setShowUpdateTicketModal] = useState(false);\n    const [showTicketModal, setShowTicketModal] = useState(false);\n    const [showSolutionModal, setShowSolutionModal] = useState(false);\n    const [currentTicketModal, setCurrentTicketModal] = useState([]);\n    const [ticketDescription, setTicketDescription] = useState('');\n    const [ticketTitle, setTicketTitle] = useState('');\n    const [pageNum, setPageNum] = useState(1);\n\n\n    const numOfTickets = tickets.length;\n    const ticketsPerPage = 4;\n    const firstTicketToDisplay = ((pageNum - 1) * ticketsPerPage) + 1;\n\n    // eg. user clicks page 2 button, we want tickets 5-8 to display.\n    const displayTickets = tickets.slice((firstTicketToDisplay - 1), (firstTicketToDisplay + (ticketsPerPage - 1)));\n    const numOfPages = Math.ceil(numOfTickets / ticketsPerPage);\n\n    const openTicketModal = (ticketDetails) => {\n        setShowTicketModal(prev => !prev);\n        setCurrentTicketModal(ticketDetails);\n    }\n\n    const openCreateTicketModal = () => {\n        setShowCreateTicketModal(prev => !prev);\n    }\n\n    const openUpdateTicketModal = (ticketDetails) => {\n        setShowUpdateTicketModal(prev => !prev);\n        setCurrentTicketModal(ticketDetails);\n        setTicketDescription(ticketDetails.description);\n        setTicketTitle(ticketDetails.title);\n    }\n\n    const openSolutionModal = (ticketDetails) => {\n        setShowSolutionModal(prev => !prev);\n        setCurrentTicketModal(ticketDetails);\n    }\n\n    const updateTicketContents = ({ ticketDescription, ticketTitle, currentTicketModal }) => {\n       \n        axios.put(`http://localhost:8899/tickets/update/${currentTicketModal.id}`, {\n            complete: currentTicketModal.complete,\n            name: currentTicketModal.name,\n            description: ticketDescription,\n            title: ticketTitle,\n            urgency: currentTicketModal.urgency\n        })\n            .then(function (response) {\n                console.log(response);\n            })\n            .catch(function (error) {\n                console.log(error);\n            })\n        setRefresh(true);\n    }\n\n    const updateTicketWithSolution = ({ solution, currentTicketModal }) => {\n       \n        axios.put(`http://localhost:8899/tickets/update/${currentTicketModal.id}`, {\n            complete: true,\n            name: currentTicketModal.name,\n            description: currentTicketModal.description,\n            title: currentTicketModal.title,\n            solution: solution,\n            urgency: currentTicketModal.urgency\n        })\n            .then(function (response) {\n                console.log(response);\n            })\n            .catch(function (error) {\n                console.log(error);\n            })\n            setRefresh(true);\n}\n\n\n    const createNewTicket = ({ name, ticketDescription, ticketTitle, urgency }) => {\n        axios.post(`http://localhost:8899/tickets/create`, {\n            complete: false,\n            name: name,\n            description: ticketDescription,\n            title: ticketTitle,\n            urgency: urgency\n        })\n            .then(function (response) {\n                console.log(response);\n            })\n            .catch(function (error) {\n                console.log(error);\n            })\n            setRefresh(true);\n    }\n\n   \n    const deleteTicket = (id) => {\n        axios.delete(`http://localhost:8899/tickets/delete/${id}`)\n            .then(function (response) {\n                console.log(response);\n            })\n            .catch(function (error) {\n                console.log(error);\n            })\n\n            setRefresh(true);\n\n    }\n\n    const changePage = ({ selected }) => {\n        setPageNum(selected + 1);\n        console.log('updated list with new ticket: ', tickets);\n    }\n\n\n    return (\n        <>\n            <div className=\"queuedHeading\">\n                <h2 className=\"header\" id=\"create-ticket\">Queued Tickets</h2>\n                <button className=\"btnCreate\" id=\"create-ticket\" onClick={openCreateTicketModal}>\n                    Create Ticket\n\t\t\t    </button>\n\n            </div>\n            <div className=\"cardGrid\">\n                {\n                    displayTickets.map((cardStuff) => (\n                        <CardStructure key={cardStuff.id} cardStuff={cardStuff} openTicketModal={openTicketModal} deleteTicket={deleteTicket} openUpdateTicketModal={openUpdateTicketModal} openSolutionModal={openSolutionModal}/>\n                    ))\n\n                }\n                <CardModal showTicketModal={showTicketModal} setShowTicketModal={setShowTicketModal} currentTicketModal={currentTicketModal} />\n                <CreateTicketModal showCreateTicketModal={showCreateTicketModal} setShowCreateTicketModal={setShowCreateTicketModal} createNewTicket={createNewTicket} />\n                <UpdateTicketModal showUpdateTicketModal={showUpdateTicketModal} setShowUpdateTicketModal={setShowUpdateTicketModal} updateTicketContents={updateTicketContents} currentTicketModal={currentTicketModal} setCurrentTicketModal={setCurrentTicketModal} ticketDescription={ticketDescription} setTicketDescription={setTicketDescription} ticketTitle={ticketTitle} setTicketTitle={setTicketTitle} />\n                <SolutionModal showSolutionModal={showSolutionModal} setShowSolutionModal={setShowSolutionModal} currentTicketModal={currentTicketModal} updateTicketWithSolution={updateTicketWithSolution}/>\n            </div>\n            <div className=\"pageArea\">\n                <ReactPaginate\n                    previousLabel={\"Previous\"}\n                    nextLabel={\"Next\"}\n                    pageCount={numOfPages}\n                    onPageChange={changePage}\n                    containerClassName={\"pageButtons\"}\n                    previousLinkClassName={\"previousButton\"}\n                    nextLinkClassName={\"nextButton\"}\n                    activeClassName={\"activePage\"}\n                    disabledClassName={\"disabled\"}\n                />\n            </div>\n        </>\n\n    )\n\n}\n\nexport default QueuedTickets;"]},"metadata":{},"sourceType":"module"}